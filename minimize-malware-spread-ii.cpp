class Solution {
public:
    vector<int> cs, last;
    vector<bool> vis, inf;
    int n;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        cs.resize(n, 0);
        last.resize(n, -1);
        inf.resize(n, false);
        vis.resize(n, false); // resize will not change the value of exist elements
        
        sort(initial.begin(), initial.end());
        for (int x : initial) inf[x] = true;
        
        for (int x : initial) {
            for (int i = 0; i < n; i ++) vis[i] = 0;
            dfs(x, x, graph);
        }
        
        vector<int> ct(n, 0);
        for (int i = 0; i < n; i ++)
            if (cs[i] == 1) ct[last[i]] ++;
        
        int idx = initial[0];
        for (int i = 0; i < n; i ++) 
            if (ct[idx] < ct[i]) idx = i;
        return idx;
    }
    
    void dfs(int x, int f, vector<vector<int>>& g) {
        for (int i = 0; i < n; i ++)
            if (g[x][i] && !inf[i] && !vis[i]) {
                vis[i] = true;
                last[i] = f;
                cs[i] ++;
                dfs(i, f, g);
            }
    }
};